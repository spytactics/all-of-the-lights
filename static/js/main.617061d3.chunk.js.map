{"version":3,"sources":["App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["MQTT_KEY","CryptoJS","AES","decrypt","process","toString","enc","Utf8","MQTT_USER","mqtt","require","options","username","password","clientId","Math","random","substr","keepalive","reconnectPeriod","clean","port","client","connect","document","body","classList","add","console","log","publish","divStyle","marginLeft","App","useState","isDarkMode","setIsDarkMode","colorHexCode","setColorHexCode","value","label","defaultOption","style","className","particlesOptions","onChange","mode","placeholder","checked","size","color","onChangeComplete","querySelector","backgroundColor","hex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.617061d3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Particles from \"react-tsparticles\";\nimport './App.css';\nimport particlesOptions from \"./particles.json\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport { SliderPicker } from 'react-color';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport CryptoJS from \"react-native-crypto-js\";\n\n// global var\nexport const MQTT_KEY = CryptoJS.AES.decrypt(process.env.REACT_APP_MQTT_KEY, process.env.REACT_APP_SALT).toString(CryptoJS.enc.Utf8);\nexport const MQTT_USER = CryptoJS.AES.decrypt(process.env.REACT_APP_MQTT_USER, process.env.REACT_APP_SALT).toString(CryptoJS.enc.Utf8);\n\n\n// create mqtt client\nvar mqtt    = require('mqtt');\nvar options = {\n    username: MQTT_USER,\n\tpassword: MQTT_KEY,\n    clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n    keepalive: 60,\n    reconnectPeriod: 1000,\n    clean: true,\n    port: 443\n\n};\nvar client  = mqtt.connect('wss://io.adafruit.com', options);\n\n// disable page scroll\ndocument.body.classList.add(\"no-sroll\")\n\n// init page\nconsole.log(\"Lights on\")\nclient.publish(`${MQTT_USER}/feeds/bl.brightness`, \"120\")\n\n\nconst divStyle = {\n    marginLeft: '0px',\n};\n\n\n\n\n\nfunction App() {\n    const [isDarkMode, setIsDarkMode] = useState(() => false);\n    const [colorHexCode, setColorHexCode] = useState('#862d2d');\n    //const [selected, setSelected] = useState([]);\n\n    const toggleColor = (color) => {\n        document.querySelector(\"#tsparticles > canvas\").style.backgroundColor = color.hex\n        setColorHexCode(color.hex)\n        client.publish(`${MQTT_USER}/feeds/bl.color`, color.hex)\n    }\n\n    const options = [\n        { value: '1', label: 'Static' },\n        { value: '2', label: 'Blink' },\n        { value: '3', label: 'Breath' },\n        { value: '4', label: 'Color Wipe' },\n        { value: '5', label: 'Color Wipe Inverse' },\n        { value: '6', label: 'Color Wipe Reverse' },\n        { value: '7', label: 'Color Wipe Reverse Inverse' },\n        { value: '8', label: 'Color Wipe Random' },\n        { value: '9', label: 'Random Color' },\n        { value: '10', label: 'Single Dynamic' },\n        { value: '11', label: 'Multi Dynamic' },\n        { value: '12', label: 'Rainbow' },\n        { value: '13', label: 'Rainbow Cycle' },\n        { value: '14', label: 'Scan' },\n        { value: '15', label: 'Dual Scan' },\n        { value: '16', label: 'Fade' },\n        { value: '17', label: 'Theater Chase' },\n        { value: '18', label: 'Theater Chase Rainbow' },\n        { value: '19', label: 'Running Lights' },\n        { value: '20', label: 'Twinkle' },\n        { value: '21', label: 'Twinkle Random' },\n        { value: '22', label: 'Twinkle Fade' },\n        { value: '23', label: 'Twinkle Fade Random' },\n        { value: '24', label: 'Sparkle' },\n        { value: '25', label: 'Flash Sparkle' },\n        { value: '26', label: 'Hyper Sparkle' },\n        { value: '27', label: 'Strobe' },\n        { value: '28', label: 'Strobe Rainbow' },\n        { value: '29', label: 'Multi Strobe' },\n        { value: '30', label: 'Blink Rainbow' },\n        { value: '31', label: 'Chase White' },\n        { value: '32', label: 'Chase Color' },\n        { value: '33', label: 'Chase Random' },\n        { value: '34', label: 'Chase Rainbow' },\n        { value: '35', label: 'Chase Flash' },\n        { value: '36', label: 'Chase Flash Random' },\n        { value: '37', label: 'Chase Rainbow White' },\n        { value: '38', label: 'Chase Blackout' },\n        { value: '39', label: 'Chase Blackout Rainbow' },\n        { value: '40', label: 'Color Sweep Random' },\n        { value: '41', label: 'Running Color' },\n        { value: '42', label: 'Running Red Blue' },\n        { value: '43', label: 'Running Random' },\n        { value: '44', label: 'Larson Scanner' },\n        { value: '45', label: 'Comet' },\n        { value: '46', label: 'Fireworks' },\n        { value: '47', label: 'Fireworks Random' },\n        { value: '48', label: 'Merry Christmas' },\n        { value: '49', label: 'Fire Flicker' },\n        { value: '50', label: 'Fire Flicker (soft)' },\n        { value: '51', label: 'Fire Flicker (intense)' },\n        { value: '52', label: 'Circus Combustus' },\n        { value: '53', label: 'Halloween' },\n        { value: '54', label: 'Bicolor Chase' },\n        { value: '55', label: 'Tricolor Chase' },    \n    ]\n    const defaultOption = options[0]\n\n\n    const selectMode = (mode) => {\n        client.publish(`${MQTT_USER}/feeds/bl.mode`, mode.value)\n    }\n\n    const toggleClass = () => {\n        setIsDarkMode(!isDarkMode);\n        if (isDarkMode) {\n            console.log(\"Lights on\")\n            client.publish(`${MQTT_USER}/feeds/bl.brightness`, \"45\")\n        } else {\n            console.log(\"Lights off\")\n            client.publish(`${MQTT_USER}/feeds/bl.brightness`, \"0\")\n        }\n      };\n    \n    return (\n        <div style={divStyle} className=\"App\">\n            <Particles options={particlesOptions}/>\n            <container>\n                <Dropdown options={options} onChange={selectMode} value={defaultOption} placeholder=\"Select an option\" />\n            </container>\n            <container className=\"App-header\">\n                <div>Lights On/Off</div>\n                <DarkModeToggle\n                    onChange={toggleClass}\n                    checked={isDarkMode}\n                    size={150}\n                />\n            </container>\n            <container>\n            <div></div>\n                <SliderPicker\n                    color={colorHexCode}\n                    onChangeComplete={toggleColor}\n                />\n            </container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}